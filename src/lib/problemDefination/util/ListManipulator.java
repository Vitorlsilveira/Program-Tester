/*
* Copyright 2017 Program Tester Team
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at

*     http://www.apache.org/licenses/LICENSE-2.0

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* package lib.adminModule;
*/
package lib.problemDefination.util;
import java.util.*;
import java.util.function.*;
import java.util.stream.Collectors;

/**
 * this class contain methods to perform various operation on Lists of Strings.
 * @author Neel Patel
 */
public final class ListManipulator {
     private ListManipulator(){}
     
     /**
      * this method compare each elements of List arguments using
        BiPredicate {@code sc}.
      * method use {@code sc} to compare all String elements of {@code o1} to the
        corresponding String element of {@code o2}.
      * returns {@code true}, if all the elements of {@code o1} is equals to
        the corresponding elements of {@code o2} using {@code BiPredicate}
        {@code sc}.<br>
      * NOTE :- this method will not modify any Lists of strings given in
        arguments. although copy of Original Lists as argument is recommended.<br>
        the Lists given in arguments should not be modify in parallel of this 
        method call by any other threads.
      * @param o1 List of String to be compare
      * @param o2 List of String to be compare
      * @param sc BiPredicate used to compare every elements.
      * @return true if o1 and o2 is equals on several parameters, false otherwise.
      */
     public static boolean compare(List<String>o1,List<String>o2,
               BiPredicate<String,String> sc){
          Iterator<String> i1=o1.iterator();
          try{
               if(o2.stream().allMatch((s2) ->sc.test(s2,i1.next()))) {
                    if(!i1.hasNext())
                         return true;
               }
          }catch(NoSuchElementException e){
               return false;
          }finally{
               System.gc();
          }
          return false;
     }
     
     /**
      * this method remove null String elements from the list of Strings
        {@code li}.
      * this method create return new List including all {@code none null}
        elements of List {@code li}.<br>
      * NOTE :- this method will not modify List of strings given in
        arguments. although copy of Original List as argument is recommended.<br>
        the List given in arguments should not be modify in parallel of this 
        method call by any other threads.
      * @param li List of String.
      * @return new list of string generated by removing {@code null} strings
        from {@code li}.
      */
     public static List<String> removeNull(List<String> li){
          return li.stream().filter(s->!s.trim().isEmpty())
                    .collect(Collectors.toList());
     }
     
     /**
      * this method trims all String elements from the list of Strings
        {@code li}.
      * this method remove preceding and trailing whitespace of all elements 
        List {@code li}.
      * this method create return new list containing String elements generated
        by applying trim operation on elements of List {@code li}.<br>
      * NOTE :- this method will not modify List of strings given in
        arguments. although copy of Original List as argument is recommended.<br>
        the List given in arguments should not be modify in parallel of this 
        method call by any other threads.
      * @param li List of String.
      * @return new list of string generated by removing preceding and trailing 
        whitespace of elements of {@code li}.
      */
     public static List<String> trim(List<String> li){
          return li.stream().map(s->s.trim()).collect(Collectors.toList());
     }
     
     /**
      * return List of string generated concatenation of arrays of strings
        generated by applying split operation on all elements of List {@code li}.
      * this method first call {@link removeNull} to remove null strings.
      * then this method apply split method to the string elements of the 
        {@code li}.
      * then create and return new List by concatenation of the Arrays of Strings.<br>
      * {@code for example..
      * List li=new ArrayList("abc de","","fg    hij k");
      * List nli=splitFromWS(li);
      * System.out.println(nli);\\["abc","de","fg","hij","k"]}<br>
      * NOTE :- this method will not modify List of strings given in
        arguments. although copy of Original List as argument is recommended.<br>
        the List given in arguments should not be modify in parallel of this 
        method call by any other threads.<br>
      * @param li list of string
      * @return list of string
      */
     public static List<String> splitFromWS(List<String> li){
          List<String> r=removeNull(li).stream()
                              .map(s->s.split("\\s"))
                              .flatMap(a->Arrays.stream(a))
                              .collect(Collectors.toList());
          return removeNull(li);
     }
}
